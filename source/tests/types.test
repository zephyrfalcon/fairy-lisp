;; types

(type-name (type 3))
=> integer
(type-name (type 'x))
=> symbol
(type-name (type "hello"))
=> string
(type-name (type '()))
=> nil
(type-name (type '(1 2 3)))
=> pair
(type-name (type cons))
=> bfunc
(type-name (type cadr))
=> ufunc
(type-name (type ':x))
=> keyword

;; type is its own parent type
(type-name (type (type 3)))
=> type

;; --- parent types ---

(type-name (type-parent (type 3)))
=> number
(type-name (type-parent (type ())))
=> list
(type-name (type-parent (type '(1 2 3))))
=> list
(type-name (type-parent (type 'x)))
=> type
(type-name (type-parent (type +)))
=> function

(subtype-of? <integer> <number>)
=> true
(subtype-of? <integer> <integer>)
=> false

(instance-of? 3 <integer>)
=> true
(instance-of? 4 <number>)
=> true
(instance-of? 5 <type>)
=> true
(instance-of? 6 <string>)
=> false

;; --- predicates ---

(symbol? 'x)
=> true
(symbol? 3)
=> false
(keyword? ':x)
=> true
(string? "abc")
=> true
(string? 'abc)
=> false

