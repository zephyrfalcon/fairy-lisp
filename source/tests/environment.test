;; environment tests

;; --- environments ---

(type-name (type (current-env)))
=> env
(eq? (current-env) (current-env))
=> true
(env-get (current-env) '+)
=> #<+>
(env-get (current-env) 'bogus 33)
=> 33

(env-has? (global-env) 'cadr)
=> true
(env-has? (global-env) 'bogus-does-not-exist)
=> false
(env-has? (builtin-env) '+)
=> true
(env-has? (builtin-env) 'bogus-does-not-exist)
=> false

(define e1 (make-env))
(env-has? e1 '+)
=> false
(define e2 (make-env (current-env)))
(env-has? e2 '+)
=> true
(define e3 (make-env (current-env)))
(env-set! e3 'foo 42)
(env-get e3 'foo)
=> 42

(define k 0)
(define (modify-caller-env x)
  (env-set! %caller-env 'k x))
(modify-caller-env 44)
k
=> 44

(define e2 (make-env))
(env-set! e2 'foo 1)
(env-local-names e2)
=> (foo)

(define e3 (make-env (global-env)))
(env-set! e3 'bar 2)
(env-local-names e3)
=> (bar)

(define e4 (make-env (global-env)))
(env-set! e4 'baz 3)
(define names (env-names e4))
(> (length names) 10)
=> true


