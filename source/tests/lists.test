;; tests for lists

(cons 1 2)
=> (1 . 2)
(cons 3 ())
=> (3)
(cons 1 (cons 2 (cons 3 ())))
=> (1 2 3)
(cons 1 (cons 2 (cons 3 4)))
=> (1 2 3 . 4)

(car '(1 2 3))
=> 1
(car '((1 2) (3 4)))
=> (1 2)

(cdr '(1 2 3))
=> (2 3)
(cdr '(1))
=> ()
(cdr (cons 1 2))
=> 2

;; --- first, second, etc

(first '(1 2 3))
=> 1
(second '(1 2 3))
=> 2
(third '(1 2 3))
=> 3

;; --- c{a,d}+r

(cadr '(1 2 3 4))
=> 2
(cddr '(1 2 3 4))
=> (3 4)

;; --- reverse

(reverse '())
=> ()
(reverse '(1 2 3))
=> (3 2 1)
(reverse '(a (b c) d (e f) ()))
=> (() (e f) d (b c) a)

;; --- map

(map (lambda (x) (+ x 1)) '(1 2 3))
=> (2 3 4)
(map (lambda (x) (+ x 1)) ())
=> ()

;; --- append

(append () ())
=> ()
(append () '(1 2))
=> (1 2)
(append '(1 2) ())
=> (1 2)
(append '(1 2) '(3 4))
=> (1 2 3 4)

;; --- length

(length ())
=> 0
(length '(a b c))
=> 3
;; LATER: calling LENGTH on improper list causes an error

;; an empty list is not a pair
(pair? ())
=> false
;; but it do be a list :)
(list? ())
=> true
