;; module.test

(define m (make-module 'bah))
(type-name (type m))
=> module

(define m (make-module 'quux))
(env-set! (module-env m) 'zork 33)
(env-get (module-env m) 'zork)
=> 33

(define m (make-module 'quux))
(module-set! m 'baz 44)
(module-get m 'baz)
=> 44

(define m (make-module 'quux))
(module-set! m 'baz 44)
(module-set! m 'belch 1)
(module-names m)
=> (baz belch)

;; --- tests/etc/mymod.fl ---

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(eq? (type mymod) <module>)
=> true

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(module-names mymod)
=> (bar foo)

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
((module-get mymod 'foo) 33)
=> 34

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(define f ((module-get mymod 'bar) 10))
(define g ((module-get mymod 'bar) 20))
(list (f 20) (g 20))
=> (31 41)

;; --- module-get* ---

(define foo (make-module 'foo))
(module-set! foo 'x 11)
(module-get* foo 'x)
=> 11

(define foo (make-module 'foo))
(module-set! foo 'bar (make-module 'bar))
(module-set! (module-get foo 'bar) 'baz 42)
(module-get* foo 'bar 'baz)
=> 42
