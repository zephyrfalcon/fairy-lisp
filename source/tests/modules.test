;; module.test

(define m (make-module 'bah))
(type-name (type m))
=> module

(define m (make-module 'quux))
(env-set! (module-env m) 'zork 33)
(env-get (module-env m) 'zork)
=> 33

(define m (make-module 'quux))
(module-set! m 'baz 44)
(module-get m 'baz)
=> 44

(define m (make-module 'quux))
(module-set! m 'baz 44)
(module-set! m 'belch 1)
(module-names m)
=> (baz belch)

(define foo (make-module 'foo))
(module-name foo)
=> foo

(define foo (make-module 'foo))
(module-name-set! foo 'bark)
(module-name foo)
=> bark

(define foo (make-module 'foo))
(module? foo)
=> true

;; --- tests/etc/mymod.fl ---

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(eq? (type mymod) <module>)
=> true

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(module-names mymod)
=> (bar foo)

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
((module-get mymod 'foo) 33)
=> 34

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(define f ((module-get mymod 'bar) 10))
(define g ((module-get mymod 'bar) 20))
(list (f 20) (g 20))
=> (31 41)

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(equal? (module-path mymod) filename)
=> true

(define filename (path-join (list *lisp-test-path* "etc" "mymod.fl")))
(%%import-string filename)
(module-names mymod)
=> (bar foo)

;; --- module-get* ---

(define foo (make-module 'foo))
(module-set! foo 'x 11)
(module-get* foo 'x)
=> 11

(define foo (make-module 'foo))
(module-set! foo 'bar (make-module 'bar))
(module-set! (module-get foo 'bar) 'baz 42)
(module-get* foo 'bar 'baz)
=> 42

;; --- module accessor forms ---

(module-accessor-form? 'foo:bar)
=> true
(module-accessor-form? 'foo:bar:)
=> false
(module-accessor-form? ':foo:bar)
=> false
(module-accessor-form? 'foobar)
=> false

(module-accessor-expand 'foo:bar)
=> (module-get* foo (quote bar))
(module-accessor-expand 'math:trig:sin)
=> (module-get* math (quote trig) (quote sin))
;; should leave non-module-accessor forms alone
(module-accessor-expand '(a b c))
=> (a b c)
;; does not expand recursively
(module-accessor-expand '(a b:c d))
=> (a b:c d)

(define foo (make-module 'foo))
(module-set! foo 'bar 42)
foo:bar
=> 42

(define foo (make-module 'foo))
(module-set! foo 'bar 42)
(+ foo:bar 1)
=> 43

;; test a function foo:add
(define foo (make-module 'foo))
(module-set! foo 'add (lambda (a b) (+ a b)))
(foo:add 1 2)
=> 3

;; same function, test it with APPLY
(define foo (make-module 'foo))
(module-set! foo 'add (lambda (a b) (+ a b)))
(apply foo:add '(3 4))
=> 7

;; TODO: test a macro... >.>
(define foo (make-module 'foo))
(module-set! foo 'when (macro (c b) (list 'if c b false)))
(foo:when (= 2 2) 5 6)
=> 5

;; test import && macros
(define filename (path-join (list *lisp-test-path* "etc" "macri.fl")))
(%%import-string filename)
(define x 1)
(macri:when (= x 1) (set! x 2) (set! x 3))
x
=> 2

(define filename (path-join (list *lisp-test-path* "etc" "macri.fl")))
(%%import-string filename)
(macroexpand '(macri:when a b) (current-env))
=> (if a b false)

