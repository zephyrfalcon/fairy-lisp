;; test builtins and special forms

;; --- quote ---

'x
=> x
'3
=> 3
'()
=> ()
'(x y z)
=> (x y z)

;; --- define ---

(define x 42)
x
=> 42

;; --- lambda ---

(define inc 
  (lambda (x) (+ x 1)))
(inc 33)
=> 34

;; lambda with multiple expressions in body
(define foo
  (lambda (x y)
    x y))
(foo 9 10)
=> 10

;; --- do ---

(do 1 2 3)
=> 3
(do (+ 1 2) (+ 3 4))
=> 7

;; TODO: DO with side effects

;; --- simple IF constructs --

(if true 1 2)
=> 1
(if false 1 2)
=> 2
(if true (+ 1 1) (+ 2 2))
=> 2
(if false (+ 1 1) (+ 2 2))
=> 4

;; --- eq? ---

(eq? 1 1)
=> false
(eq? true true)
=> true
(eq? () ())
=> true
(eq? '(1 2 3) '(1 2 3))
=> false

;; --- equal? ---

(equal? 1 1)
=> true
(equal? 'x 'x)
=> true
(equal? 'y 'Y)
=> true
(equal? "hello" "hello")
=> true

