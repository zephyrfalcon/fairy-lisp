;; test macros, macro-expansion, etc.

;; --- macro? ---

(define m 
  (macro (x) (+ x 1)))
(macro? m)
=> true

;; --- macroexpand-1 ---

(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand-1 '(test-when a b) (current-env))
=> ((if a b false) true)

;; this is not a macro, so no expansion
(macroexpand-1 '(if a b c) (current-env))
=> ((if a b c) false)

;; --- macroexpand-all ---

(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand-all '(test-when a b) (current-env))
=> (if a b false)
;; TODO: try with more complicated macros...

;; not a macro
(macroexpand-all '(foo bar) (current-env))
=> (foo bar)

;; --- macroexpand ---

;; test if macro expansion is applied recursively
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(test-when a (test-when b c)) (current-env))
=> (if a (if b c false) false)

(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(foo (test-when a b)) (current-env))
=> (foo (if a b false))

;; test if QUOTE is handled correctly
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(test-when a (quote (test-when b c))) (current-env))
=> (if a (quote (test-when b c)) false)

;; test if DEFINE is handled correctly
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(test-when a (define (foo x) (+ x 1))) (current-env))
=> (if a (define (foo x) (+ x 1)) false)

;; what if there is a macro inside the DEFINE?
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(test-when a (define (foo x) (test-when x y))) (current-env))
=> (if a (define (foo x) (if x y false)) false)

;; test if DO is handled correctly
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(test-when a (do b c (test-when d e))) (current-env))
=> (if a (do b c (if d e false)) false)

;; test if LET is handled correctly
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(test-when a (let (x 3 y (test-when c d)) (test-when a b))) 
             (current-env))
=> (if a (let (x 3 y (if c d false)) (if a b false)) false)

;; test if COND is handled correctly
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(cond
                (x (test-when a b))
                ((test-when c d) y)
                (else (test-when e f)))
             (current-env))
=> (cond (x (if a b false)) ((if c d false) y) (else (if e f false)))
;; ...and with multiple expressions after the condition...?
(define test-when
  (macro (cond body)
    (list 'if cond body false)))
(macroexpand '(cond
                (x (test-when a b) 7)
                ((test-when c d) y 8)
                (else (test-when e f) 9))
             (current-env))
=> (cond (x (if a b false) 7) ((if c d false) y 8) (else (if e f false) 9))

;; test how keywords are handled by MACROEXPAND-1
(macroexpand-1 '(f 1 :foo 2) (current-env))
=> ((f 1 :foo 2) false)
(macroexpand-1 ':x (current-env))
=> (:x false)
(macroexpand '(f 1 :foo 2) (current-env))
=> (f 1 :foo 2)

;; test calling the WHEN macro, then
;; XXX does not work yet; currently this is only done in REPL!
(when true (+ 1 2))
=> 3
;; with multiple expressions in body...
(when true 1 2 3)
=> 3
;; what does it look like in MACROEXPAND?
(macroexpand '(when true a b c) (current-env))
=> (if true (do a b c) false)

;; macros currently don't do anything special with keyword arguments. so this
;; currently works:
(when true :x)
=> :x

;; do rest args work inside macros? 
(define foobar
  (macro (x)
    (cons 'list (cons x %rest))))
(foobar 1 2 3)
=> (1 2 3)

;; what about keywords? not quite yet...
(define quux
  (macro ()
    (list 'list (cons 'list %rest) %keywords)))
(quux 1 2 :foo 3)
=> ((1 2) #d())

;; test macros with EVAL
(eval '(when true 1) (current-env))
=> 1

;; --- define-macro ---

(macroexpand
  '(define-macro (my-macro foo bar) 
     (quux 42 foo bar))
  (current-env))
=> (define my-macro (macro (foo bar) (quux 42 foo bar)))

(define-macro (my-when cond body)
  (list 'if cond body false))
(macroexpand '(my-when 1 2) (current-env))
=> (if 1 2 false)

(define-macro (my-when cond body)
  (list 'if cond body false))
(list (my-when true 3) (my-when false 4))
=> (3 false)
